Index: app/src/main/java/com/example/foodapp/Repository/MainRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.foodapp.Repository\r\n\r\nimport com.google.firebase.database.FirebaseDatabase\r\n\r\nclass MainRepository {\r\n\r\n    private val firebaseDatabase = FirebaseDatabase.getInstance()\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/foodapp/Repository/MainRepository.kt b/app/src/main/java/com/example/foodapp/Repository/MainRepository.kt
--- a/app/src/main/java/com/example/foodapp/Repository/MainRepository.kt	(revision e6bc284194870eaab413962c5bc9e4b8a9b7f963)
+++ b/app/src/main/java/com/example/foodapp/Repository/MainRepository.kt	(date 1740471016117)
@@ -1,10 +1,53 @@
 package com.example.foodapp.Repository
 
+import com.example.foodapp.Domain.BannerModel
+import com.google.firebase.database.DataSnapshot
+import com.google.firebase.database.DatabaseError
 import com.google.firebase.database.FirebaseDatabase
+import com.google.firebase.database.ValueEventListener
+import kotlinx.coroutines.channels.awaitClose
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.callbackFlow
 
 class MainRepository {
 
     private val firebaseDatabase = FirebaseDatabase.getInstance()
 
+//    fun loadBanner():LiveData<MutableList<BannerModel>>{
+    //val listData = MutableLiveData<MutableList<BannerModel>>()
+
+    fun loadBanner(): Flow<List<BannerModel>> = callbackFlow {
+        val ref = firebaseDatabase.getReference("Banners")
+        //    ref.addValueEventListener(object : ValueEventListener{
+        val listener = object : ValueEventListener{
+
+            override fun onDataChange(snapshot: DataSnapshot) {
+                val list = mutableListOf<BannerModel>()
+                for(childSnapshot in snapshot.children){
+                    val item = childSnapshot.getValue(BannerModel::class.java)
+                    item?.let { list.add(it) }
+                }
+//                listData.value = list
+                trySend(list).isSuccess // Send data to the flow
+            }
+            override fun onCancelled(error: DatabaseError) {
+                close(error.toException()) // Close the flow on error
+            }
+        }
+        ref.addValueEventListener(listener)
+        // Remove listener when flow is canceled.., it's a GC
+        awaitClose{ref.removeEventListener(listener)}
+//        return listData
+
+    }
+}
+
 
-}
\ No newline at end of file
+
+
+//class MainViewModel(private val repository: MainRepository) : ViewModel() {
+//
+//    val bannerFlow = repository.loadBanner()
+//        .stateIn(viewModelScope, SharingStarted.Lazily, emptyList()) // Convert Flow to StateFlow for UI
+//
+//}
\ No newline at end of file
